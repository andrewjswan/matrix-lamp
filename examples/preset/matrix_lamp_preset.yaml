esphome:
  on_boot:
    priority: -100
    then:
      - delay: 500ms
      - select.set_index:
          id: preset_selector
          index: !lambda 'return id(preset_selected);'
      - delay: 500ms
      - lambda: |-
          id(preset_info).update();

globals:
  - id: preset_selected
    type: int
    restore_value: yes
    initial_value: '0'
  # Пресет 0
  - id: preset0_effect_name
    type: std::string
    restore_value: yes
    initial_value: '""'
  - id: preset0_intensity
    type: int
    restore_value: yes
    initial_value: '128'
  - id: preset0_speed
    type: int
    restore_value: yes
    initial_value: '128'
  - id: preset0_scale
    type: int
    restore_value: yes
    initial_value: '50'
  - id: preset0_effect_mode
    type: int
    restore_value: yes
    initial_value: '0'
  - id: preset0_brightness
    type: int
    initial_value: '1'
    restore_value: yes
  # Пресет 1
  - id: preset1_effect_name
    type: std::string
    restore_value: yes
    initial_value: '""'
  - id: preset1_intensity
    type: int
    restore_value: yes
    initial_value: '128'
  - id: preset1_speed
    type: int
    restore_value: yes
    initial_value: '128'
  - id: preset1_scale
    type: int
    restore_value: yes
    initial_value: '50'
  - id: preset1_effect_mode
    type: int
    restore_value: yes
    initial_value: '1'
  - id: preset1_brightness
    type: int
    initial_value: '1'
    restore_value: yes
  # Пресет 2
  - id: preset2_effect_name
    type: std::string
    initial_value: '""'
    restore_value: yes
  - id: preset2_intensity
    type: int
    restore_value: yes
    initial_value: '128'
  - id: preset2_speed
    type: int
    restore_value: yes
    initial_value: '128'
  - id: preset2_scale
    type: int
    restore_value: yes
    initial_value: '50'
  - id: preset2_effect_mode
    type: int
    restore_value: yes
    initial_value: '2'
  - id: preset2_brightness
    type: int
    initial_value: '1'
    restore_value: yes

button:
  - platform: template
    name: "Save Preset"
    on_press:
      then:
        - lambda: |-
            float brightness = id(neopixel_led).current_values.get_brightness();
            int bright_int = (int)(brightness * 255);

            auto opt_index = id(preset_selector).active_index();
            if (opt_index.has_value()) {
              int index = opt_index.value();
              switch(index) {
                case 0:
                  id(preset0_effect_name) = id(neopixel_led)->get_effect_name();
                  id(preset0_intensity) = (int)id(matrix_intensity).state;
                  id(preset0_speed) = (int)id(matrix_speed).state;
                  id(preset0_scale) = (int)id(matrix_scale).state;
                  id(preset0_brightness) = bright_int;
                  ESP_LOGI("main", "Preset 0 saved");
                  break;
                case 1:
                  id(preset1_effect_name) = id(neopixel_led)->get_effect_name();
                  id(preset1_intensity) = (int)id(matrix_intensity).state;
                  id(preset1_speed) = (int)id(matrix_speed).state;
                  id(preset1_scale) = (int)id(matrix_scale).state;
                  id(preset1_brightness) = bright_int;
                  ESP_LOGI("main", "Preset 1 saved");
                  break;
                case 2:
                  id(preset2_effect_name) = id(neopixel_led)->get_effect_name();
                  id(preset2_intensity) = (int)id(matrix_intensity).state;
                  id(preset2_speed) = (int)id(matrix_speed).state;
                  id(preset2_scale) = (int)id(matrix_scale).state;
                  id(preset2_brightness) = bright_int;
                  ESP_LOGI("main", "Preset 2 saved");
                  break;
                default:
                  ESP_LOGW("main", "Unknown preset index %d", index);
                  break;
              }
            } else {
              ESP_LOGW("main", "No active preset selected");
            }

select:
  - platform: template
    name: "Preset Selector"
    id: preset_selector
    optimistic: true
    initial_option: "0"
    options:
      - "0"
      - "1"
      - "2"
      - "None"
    on_value:
      - lambda: |-
          // Переводим строку в число для сохранения
          int val = -1;
          if (id(preset_selector).state == "0") val = 0;
          else if (id(preset_selector).state == "1") val = 1;
          else if (id(preset_selector).state == "2") val = 2;
          else val = -1;  // None или другое

          if (val >= 0) {
            id(preset_selected) = val;
            ESP_LOGD("main", "preset_selected updated to %d", val);
          } else {
            ESP_LOGD("main", "preset_selected set to -1 (none)");
          }
      - if:
          condition:
            - lambda: 'return id(preset_selector).state == "0";'
          then:
            - lambda: |-
                float brightness = (float)id(preset0_brightness) / 255.0f;
                id(neopixel_led)->turn_on().set_brightness(brightness).set_effect(id(preset0_effect_name)).perform();
            - delay: 100ms
            - number.set:
                id: matrix_intensity
                value: !lambda 'return id(preset0_intensity);'
            - number.set:
                id: matrix_speed
                value: !lambda 'return id(preset0_speed);'
            - number.set:
                id: matrix_scale
                value: !lambda 'return id(preset0_scale);'
            - lambda: |-
                id(preset_info).update();
      - if:
          condition:
            - lambda: 'return id(preset_selector).state == "1";'
          then:
            - lambda: |-
                float brightness = (float)id(preset1_brightness) / 255.0f;
                id(neopixel_led)->turn_on().set_brightness(brightness).set_effect(id(preset1_effect_name)).perform();
            - delay: 100ms
            - number.set:
                id: matrix_intensity
                value: !lambda 'return id(preset1_intensity);'
            - number.set:
                id: matrix_speed
                value: !lambda 'return id(preset1_speed);'
            - number.set:
                id: matrix_scale
                value: !lambda 'return id(preset1_scale);'
            - lambda: |-
                id(preset_info).update();
      - if:
          condition:
            - lambda: 'return id(preset_selector).state == "2";'
          then:
            - lambda: |-
                float brightness = (float)id(preset2_brightness) / 255.0f;
                id(neopixel_led)->turn_on().set_brightness(brightness).set_effect(id(preset2_effect_name)).perform();
            - delay: 100ms
            - number.set:
                id: matrix_intensity
                value: !lambda 'return id(preset2_intensity);'
            - number.set:
                id: matrix_speed
                value: !lambda 'return id(preset2_speed);'
            - number.set:
                id: matrix_scale
                value: !lambda 'return id(preset2_scale);'
            - lambda: |-
                id(preset_info).update();
      - if:
          condition:
            - lambda: 'return id(preset_selector).state == "None";'
          then:
            - light.turn_off:
                id: neopixel_led
            - number.set:
                id: matrix_intensity
                value: 100
            - lambda: |-
                id(preset_info).update();

text_sensor:
  - platform: template
    name: "Preset Info"
    id: preset_info
    lambda: |-
      std::string state = id(preset_selector).state;
      int intensity = 0;
      int speed = 0;
      int scale = 0;
      std::string effect_name;
      uint8_t brightness = 0;
      // Преобразуем строку в число для индекса пресета
      int preset_index = -1;
      if (state == "0") preset_index = 0;
      else if (state == "1") preset_index = 1;
      else if (state == "2") preset_index = 2;

      if (preset_index == 0) {
        intensity = id(preset0_intensity);
        speed = id(preset0_speed);
        scale = id(preset0_scale);
        effect_name = id(preset0_effect_name);
        brightness = (uint8_t)(id(preset0_brightness));
      } else if (preset_index == 1) {
        intensity = id(preset1_intensity);
        speed = id(preset1_speed);
        scale = id(preset1_scale);
        effect_name = id(preset1_effect_name);
        brightness = (uint8_t)(id(preset1_brightness));
      } else if (preset_index == 2) {
        intensity = id(preset2_intensity);
        speed = id(preset2_speed);
        scale = id(preset2_scale);
        effect_name = id(preset2_effect_name);
        brightness = (uint8_t)(id(preset2_brightness));
      } else {
        return std::string("No preset selected");
      }
      char buf[128];
      int brightness_percent = (brightness * 100 + 127) / 255;  // округление
      snprintf(buf, sizeof(buf),
         "Preset index: %d\nEffect: %s\nIntensity: %d\nSpeed: %d\nScale: %d\nBrightness: %d%%",
         preset_index,
         effect_name.c_str(),
         intensity,
         speed,
         scale,
         brightness_percent);
      return std::string(buf);
