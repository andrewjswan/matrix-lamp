substitutions:
  energy_method: trapezoid

esphome:
  on_boot:
    priority: -100
    then:
      - logger.log:
          format: "Power Supply: %.1fA"
          args: ['id(power_supply).state']
          level: INFO
          tag: power

web_server:
  version: 3
  sorting_groups:
    - id: sorting_group_power
      name: "Power"
      sorting_weight: 5

logger:
  logs:
    sensor: WARN

number:
  # Power Supply
  - platform: template
    name: Power Supply
    icon: mdi:power-plug
    min_value: 0.0
    max_value: 10.0
    step: 0.5
    optimistic: true
    id: power_supply
    initial_value: 2.0
    mode: slider
    entity_category: config
    restore_value: true
    unit_of_measurement: A
    disabled_by_default: true
    web_server:
      sorting_weight: 15
      sorting_group_id: sorting_group_power

sensor:
  # Power
  - platform: template
    name: Power
    icon: mdi:flash
    id: power
    lambda: |-
      return id(current).state * 5; // A * 5V
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    update_interval: 1s
    disabled_by_default: true
    web_server:
      sorting_weight: 55
      sorting_group_id: sorting_group_power

  # Current
  - platform: template
    name: Current
    icon: mdi:current-ac
    id: current
    lambda: |-
      const float led = 20.0 / 255.0; // 20мА per Led
      #ifdef USE_ESP32
      float current = 80.0; // NodeMCU Esp 32 - 80mA
      #else
      float current = 60.0; // Wemos Esp 8266 - 60mA
      #endif

      for (int i = 0; i < ${num_leds}; i++)
      {
        auto c = ((light::AddressableLight *) id(neopixel_led)->get_output())->get(i);
        current += c.get_red() * led;
        current += c.get_green() * led;
        current += c.get_blue() * led;
        /*
        current += c.get_red() * mA / 255;
        current += c.get_green() * mA / 255;
        current += c.get_blue() * mA / 255;
        current += c.get_white() * mA / 255;
        */
      }

      current = current * id(neopixel_led).remote_values.get_brightness() / 1000; // A - 1000mA
      if (id(power_supply).state > 0.0 && current > id(power_supply).state)
      {
        current = id(power_supply).state;
      }

      return current;
    unit_of_measurement: A
    device_class: current
    state_class: measurement
    accuracy_decimals: 2
    update_interval: 1s
    disabled_by_default: true
    web_server:
      sorting_weight: 10
      sorting_group_id: sorting_group_power

  # Energy
  - platform: integration
    name: "Energy"
    icon: mdi:lightning-bolt
    sensor: power
    time_unit: h
    integration_method: ${energy_method}
    unit_of_measurement: kWh
    accuracy_decimals: 3
    restore: false
    device_class: energy
    state_class: total_increasing
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    web_server:
      sorting_weight: 15
      sorting_group_id: sorting_group_power
