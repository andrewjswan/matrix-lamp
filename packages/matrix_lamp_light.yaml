substitutions:
  num_leds: "256"
  type_leds: "GRB"
  pin_leds: "GPIO3"
  color_correct_bright: "100%"

light:
  # Neopixel with Matrix Lamp
  - platform: neopixelbus
    id: neopixel_led
    icon: mdi:lava-lamp
    type: ${type_leds}
    pin: ${pin_leds}
    num_leds: ${num_leds}
    name: ${name} NeoPixel
    color_correct: [$color_correct_bright, $color_correct_bright, $color_correct_bright]
    variant: 800KBPS  # WS2812 (same as 800KBPS)
    effects:
      - addressable_lambda:
          name: Madness
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Madness");
            }
            matrix_lamp.ShowFrame(EFF_MADNESS, current_color, &it);

      - addressable_lambda:
          name: Clouds
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Clouds");
            }
            matrix_lamp.ShowFrame(EFF_CLOUDS, current_color, &it);

      - addressable_lambda:
          name: Lava
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Lava");
            }
            matrix_lamp.ShowFrame(EFF_LAVA, current_color, &it);

      - addressable_lambda:
          name: Plasma
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Plasma");
            }
            matrix_lamp.ShowFrame(EFF_PLASMA, current_color, &it);

      - addressable_lambda:
          name: Rainbow 3D
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Rainbow 3D");
            }
            matrix_lamp.ShowFrame(EFF_RAINBOW, current_color, &it);

      - addressable_lambda:
          name: Peacock
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Peacock");
            }
            matrix_lamp.ShowFrame(EFF_RAINBOW_STRIPE, current_color, &it);

      - addressable_lambda:
          name: Zebra
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Zebra");
            }
            matrix_lamp.ShowFrame(EFF_ZEBRA, current_color, &it);

      - addressable_lambda:
          name: Forest
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Forest");
            }
            matrix_lamp.ShowFrame(EFF_FOREST, current_color, &it);

      - addressable_lambda:
          name: Ocean
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Ocean");
            }
            matrix_lamp.ShowFrame(EFF_OCEAN, current_color, &it);

      - addressable_lambda:
          name: Balls
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Balls");
            }
            matrix_lamp.ShowFrame(EFF_BBALLS, current_color, &it);

      - addressable_lambda:
          name: Balls Bounce
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Balls Bounce");
            }
            matrix_lamp.ShowFrame(EFF_BALLS_BOUNCE, current_color, &it);

      - addressable_lambda:
          name: Popcorn
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Popcorn");
            }
            matrix_lamp.ShowFrame(EFF_POPCORN, current_color, &it);

      - addressable_lambda:
          name: Spiro
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Spiro");
            }
            matrix_lamp.ShowFrame(EFF_SPIRO, current_color, &it);

      - addressable_lambda:
          name: Prismata
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Prismata");
            }
            matrix_lamp.ShowFrame(EFF_PRISMATA, current_color, &it);

      - addressable_lambda:
          name: Smokeballs
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Smokeballs");
            }
            matrix_lamp.ShowFrame(EFF_SMOKEBALLS, current_color, &it);

      - addressable_lambda:
          name: Flame
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Flame");
            }
            matrix_lamp.ShowFrame(EFF_FLAME, current_color, &it);

      - addressable_lambda:
          name: Fire 2021
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fire 2021");
            }
            matrix_lamp.ShowFrame(EFF_FIRE_2021, current_color, &it);

      - addressable_lambda:
          name: Pacific
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Pacific");
            }
            matrix_lamp.ShowFrame(EFF_PACIFIC, current_color, &it);

      - addressable_lambda:
          name: Shadows
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Shadows");
            }
            matrix_lamp.ShowFrame(EFF_SHADOWS, current_color, &it);

      - addressable_lambda:
          name: DNA
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "DNA");
            }
            matrix_lamp.ShowFrame(EFF_DNA, current_color, &it);

      - addressable_lambda:
          name: Flock
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Flock");
            }
            matrix_lamp.ShowFrame(EFF_FLOCK, current_color, &it);

      - addressable_lambda:
          name: Flock and Predator
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Flock and Predator");
            }
            matrix_lamp.ShowFrame(EFF_FLOCK_N_PR, current_color, &it);

      - addressable_lambda:
          name: Butterflys
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Butterflys");
            }
            matrix_lamp.ShowFrame(EFF_BUTTERFLYS, current_color, &it);

      - addressable_lambda:
          name: Butterflys in Lamp
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Butterflys in Lamp");
            }
            matrix_lamp.ShowFrame(EFF_BUTTERFLYS_LAMP, current_color, &it);

      - addressable_lambda:
          name: Snakes
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Snakes");
            }
            matrix_lamp.ShowFrame(EFF_SNAKES, current_color, &it);

      - addressable_lambda:
          name: Nexus
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Nexus");
            }
            matrix_lamp.ShowFrame(EFF_NEXUS, current_color, &it);

      - addressable_lambda:
          name: Spheres
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Spheres");
            }
            matrix_lamp.ShowFrame(EFF_SPHERES, current_color, &it);

      - addressable_lambda:
          name: Sinusoid
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Sinusoid");
            }
            matrix_lamp.ShowFrame(EFF_SINUSOID3, current_color, &it);

      - addressable_lambda:
          name: Metaballs
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Metaballs");
            }
            matrix_lamp.ShowFrame(EFF_METABALLS, current_color, &it);

      - addressable_lambda:
          name: Aurora
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Aurora");
            }
            matrix_lamp.ShowFrame(EFF_AURORA, current_color, &it);

      - addressable_lambda:
          name: Spider
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Spider");
            }
            matrix_lamp.ShowFrame(EFF_SPIDER, current_color, &it);

      - addressable_lambda:
          name: Lava Lamp
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Lava Lamp");
            }
            matrix_lamp.ShowFrame(EFF_LAVALAMP, current_color, &it);

      - addressable_lambda:
          name: Liquid Lamp
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Liquid Lamp");
            }
            matrix_lamp.ShowFrame(EFF_LIQUIDLAMP, current_color, &it);

      - addressable_lambda:
          name: Liquid Lamp (Auto)
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Liquid Lamp (Auto)");
            }
            matrix_lamp.ShowFrame(EFF_LIQUIDLAMP_AUTO, current_color, &it);

      - addressable_lambda:
          name: Drops
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Drops");
            }
            matrix_lamp.ShowFrame(EFF_DROPS, current_color, &it);

      - addressable_lambda:
          name: Matrix
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Matrix");
            }
            matrix_lamp.ShowFrame(EFF_MATRIX, current_color, &it);

      - addressable_lambda:
          name: Fire 2012
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fire 2012");
            }
            matrix_lamp.ShowFrame(EFF_FIRE_2012, current_color, &it);

      - addressable_lambda:
          name: Fire 2018
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fire 2018");
            }
            matrix_lamp.ShowFrame(EFF_FIRE_2018, current_color, &it);

      - addressable_lambda:
          name: Fire 2020
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fire 2020");
            }
            matrix_lamp.ShowFrame(EFF_FIRE_2020, current_color, &it);

      - addressable_lambda:
          name: Fire
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fire");
            }
            matrix_lamp.ShowFrame(EFF_FIRE, current_color, &it);

      - addressable_lambda:
          name: Whirl
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Whirl");
            }
            matrix_lamp.ShowFrame(EFF_WHIRL, current_color, &it);

      - addressable_lambda:
          name: Whirl (Multi)
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Whirl (Multi)");
            }
            matrix_lamp.ShowFrame(EFF_WHIRL_MULTI, current_color, &it);

      - addressable_lambda:
          name: Magma
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Magma");
            }
            matrix_lamp.ShowFrame(EFF_MAGMA, current_color, &it);

      - addressable_lambda:
          name: Boiling
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Boiling");
            }
            matrix_lamp.ShowFrame(EFF_LLAND, current_color, &it);

      - addressable_lambda:
          name: Waterfall
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Waterfall");
            }
            matrix_lamp.ShowFrame(EFF_WATERFALL, current_color, &it);

      - addressable_lambda:
          name: Waterfall 4 in 1
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Waterfall 4 in 1");
            }
            matrix_lamp.ShowFrame(EFF_WATERFALL_4IN1, current_color, &it);

      - addressable_lambda:
          name: Pool
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Pool");
            }
            matrix_lamp.ShowFrame(EFF_POOL, current_color, &it);

      - addressable_lambda:
          name: Pulse
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Pulse");
            }
            matrix_lamp.ShowFrame(EFF_PULSE, current_color, &it);

      - addressable_lambda:
          name: Pulse Rainbow
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Pulse Rainbow");
            }
            matrix_lamp.ShowFrame(EFF_PULSE_RAINBOW, current_color, &it);

      - addressable_lambda:
          name: Pulse White
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Pulse White");
            }
            matrix_lamp.ShowFrame(EFF_PULSE_WHITE, current_color, &it);

      - addressable_lambda:
          name: Oscilating
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Oscilating");
            }
            matrix_lamp.ShowFrame(EFF_OSCILLATING, current_color, &it);

      - addressable_lambda:
          name: Fountain
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fountain");
            }
            matrix_lamp.ShowFrame(EFF_FOUNTAIN, current_color, &it);

      - addressable_lambda:
          name: Fairy
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fairy");
            }
            matrix_lamp.ShowFrame(EFF_FAIRY, current_color, &it);

      - addressable_lambda:
          name: Comet
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Comet");
            }
            matrix_lamp.ShowFrame(EFF_COMET, current_color, &it);

      - addressable_lambda:
          name: Comet One
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Comet One");
            }
            matrix_lamp.ShowFrame(EFF_COMET_COLOR, current_color, &it);

      - addressable_lambda:
          name: Comet Two
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Comet Two");
            }
            matrix_lamp.ShowFrame(EFF_COMET_TWO, current_color, &it);

      - addressable_lambda:
          name: Comet Three
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Comet Three");
            }
            matrix_lamp.ShowFrame(EFF_COMET_THREE, current_color, &it);

      - addressable_lambda:
          name: Attract
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Attract");
            }
            matrix_lamp.ShowFrame(EFF_ATTRACT, current_color, &it);

      - addressable_lambda:
          name: Firefly
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Firefly");
            }
            matrix_lamp.ShowFrame(EFF_FIREFLY, current_color, &it);

      - addressable_lambda:
          name: Firefly Top
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Firefly Top");
            }
            matrix_lamp.ShowFrame(EFF_FIREFLY_TOP, current_color, &it);

      - addressable_lambda:
          name: Snake
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Snake");
            }
            matrix_lamp.ShowFrame(EFF_SNAKE, current_color, &it);

      - addressable_lambda:
          name: Sparkles
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Sparkles");
            }
            matrix_lamp.ShowFrame(EFF_SPARKLES, current_color, &it);

      - addressable_lambda:
          name: Twinkles
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Twinkles");
            }
            matrix_lamp.ShowFrame(EFF_TWINKLES, current_color, &it);

      - addressable_lambda:
          name: Smoke
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Smoke");
            }
            matrix_lamp.ShowFrame(EFF_SMOKE, current_color, &it);

      - addressable_lambda:
          name: Smoke Color
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Smoke Color");
            }
            matrix_lamp.ShowFrame(EFF_SMOKE_COLOR, current_color, &it);

      - addressable_lambda:
          name: Picasso
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Picasso");
            }
            matrix_lamp.ShowFrame(EFF_PICASSO, current_color, &it);

      - addressable_lambda:
          name: Waves
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Waves");
            }
            matrix_lamp.ShowFrame(EFF_WAVES, current_color, &it);

      - addressable_lambda:
          name: Sand
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Sand");
            }
            matrix_lamp.ShowFrame(EFF_SAND, current_color, &it);

      - addressable_lambda:
          name: Rings
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Rings");
            }
            matrix_lamp.ShowFrame(EFF_RINGS, current_color, &it);

      - addressable_lambda:
          name: Cube 2D
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Cube 2D");
            }
            matrix_lamp.ShowFrame(EFF_CUBE2D, current_color, &it);

      - addressable_lambda:
          name: Simple Rain
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Simple Rain");
            }
            matrix_lamp.ShowFrame(EFF_SIMPLE_RAIN, current_color, &it);

      - addressable_lambda:
          name: Stormy Rain
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Stormy Rain");
            }
            matrix_lamp.ShowFrame(EFF_STORMY_RAIN, current_color, &it);

      - addressable_lambda:
          name: Color Rain
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Color Rain");
            }
            matrix_lamp.ShowFrame(EFF_COLOR_RAIN, current_color, &it);

      - addressable_lambda:
          name: Snow
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Snow");
            }
            matrix_lamp.ShowFrame(EFF_SNOW, current_color, &it);

      - addressable_lambda:
          name: Starfall
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Starfall");
            }
            matrix_lamp.ShowFrame(EFF_STARFALL, current_color, &it);

      - addressable_lambda:
          name: Leapers
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Leapers");
            }
            matrix_lamp.ShowFrame(EFF_LEAPERS, current_color, &it);

      - addressable_lambda:
          name: Lighters
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Lighters");
            }
            matrix_lamp.ShowFrame(EFF_LIGHTERS, current_color, &it);

      - addressable_lambda:
          name: Lighters with Traces
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Lighters with Traces");
            }
            matrix_lamp.ShowFrame(EFF_LIGHTER_TRACES, current_color, &it);

      - addressable_lambda:
          name: Lumenjer
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Lumenjer");
            }
            matrix_lamp.ShowFrame(EFF_LUMENJER, current_color, &it);

      - addressable_lambda:
          name: Paintball
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Paintball");
            }
            matrix_lamp.ShowFrame(EFF_PAINTBALL, current_color, &it);

      - addressable_lambda:
          name: Rainbow
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Rainbow");
            }
            matrix_lamp.ShowFrame(EFF_RAINBOW_VER, current_color, &it);

      - addressable_lambda:
          name: Christmas Tree
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Christmas Tree");
            }
            matrix_lamp.ShowFrame(EFF_CHRISTMAS_TREE, current_color, &it);

      - addressable_lambda:
          name: By Effect
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "By Effect");
            }
            matrix_lamp.ShowFrame(EFF_BY_EFFECT, current_color, &it);

      - addressable_lambda:
          name: Color Frizzles
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Color Frizzles");
            }
            matrix_lamp.ShowFrame(EFF_COLOR_FRIZZLES, current_color, &it);

      - addressable_lambda:
          name: Colored Python
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Colored Python");
            }
            matrix_lamp.ShowFrame(EFF_COLORED_PYTHON, current_color, &it);

      - addressable_lambda:
          name: Contacts
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Contacts");
            }
            matrix_lamp.ShowFrame(EFF_CONTACTS, current_color, &it);

      - addressable_lambda:
          name: Drop in Water
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Drop in Water");
            }
            matrix_lamp.ShowFrame(EFF_DROP_IN_WATER, current_color, &it);

      - addressable_lambda:
          name: Firework
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Firework");
            }
            matrix_lamp.ShowFrame(EFF_FIREWORK, current_color, &it);

      - addressable_lambda:
          name: Firework II
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Firework II");
            }
            matrix_lamp.ShowFrame(EFF_FIREWORK_2, current_color, &it);

      - addressable_lambda:
          name: Hourglass
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Hourglass");
            }
            matrix_lamp.ShowFrame(EFF_HOURGLASS, current_color, &it);

      - addressable_lambda:
          name: Flower Ruta
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Flower Ruta");
            }
            matrix_lamp.ShowFrame(EFF_FLOWERRUTA, current_color, &it);

      - addressable_lambda:
          name: Magic Lantern
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Magic Lantern");
            }
            matrix_lamp.ShowFrame(EFF_MAGIC_LANTERN, current_color, &it);

      - addressable_lambda:
          name: Mosaic
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Mosaic");
            }
            matrix_lamp.ShowFrame(EFF_MOSAIC, current_color, &it);

      - addressable_lambda:
          name: Octopus
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Octopus");
            }
            matrix_lamp.ShowFrame(EFF_OCTOPUS, current_color, &it);

      - addressable_lambda:
          name: Paints
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Paints");
            }
            matrix_lamp.ShowFrame(EFF_PAINTS, current_color, &it);

      - addressable_lambda:
          name: Plasma Waves
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Plasma Waves");
            }
            matrix_lamp.ShowFrame(EFF_PLASMA_WAVES, current_color, &it);

      - addressable_lambda:
          name: Radial Wave
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Radial Wave");
            }
            matrix_lamp.ShowFrame(EFF_RADIAL_WAVE, current_color, &it);

      - addressable_lambda:
          name: Rivers
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Rivers");
            }
            matrix_lamp.ShowFrame(EFF_RIVERS, current_color, &it);

      - addressable_lambda:
          name: Spectrum
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Spectrum");
            }
            matrix_lamp.ShowFrame(EFF_SPECTRUM, current_color, &it);

      - addressable_lambda:
          name: Strobe / Chaos / Diffusion
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Strobe | Chaos | Diffusion");
            }
            matrix_lamp.ShowFrame(EFF_STROBE, current_color, &it);

      - addressable_lambda:
          name: Swirl
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Swirl");
            }
            matrix_lamp.ShowFrame(EFF_SWIRL, current_color, &it);

      - addressable_lambda:
          name: Tornado
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Tornado");
            }
            matrix_lamp.ShowFrame(EFF_TORNADO, current_color, &it);

      - addressable_lambda:
          name: Watercolor
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Watercolor");
            }
            matrix_lamp.ShowFrame(EFF_WATERCOLOR, current_color, &it);

      - addressable_lambda:
          name: Web Tools
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Web Tools");
            }
            matrix_lamp.ShowFrame(EFF_WEB_TOOLS, current_color, &it);

      - addressable_lambda:
          name: Wine
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Wine");
            }
            matrix_lamp.ShowFrame(EFF_WINE, current_color, &it);

      - addressable_lambda:
          name: Bamboo
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Bamboo");
            }
            matrix_lamp.ShowFrame(EFF_BAMBOO, current_color, &it);

      - addressable_lambda:
          name: Ball Routine
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Ball Routine");
            }
            matrix_lamp.ShowFrame(EFF_BALLROUTINE, current_color, &it);

      - addressable_lambda:
          name: Stars
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Stars");
            }
            matrix_lamp.ShowFrame(EFF_STARS, current_color, &it);

      - addressable_lambda:
          name: Tyxy Land
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Tyxy Land");
            }
            matrix_lamp.ShowFrame(EFF_TIXYLAND, current_color, &it);

      - addressable_lambda:
          name: Firesparcs
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Firesparcs");
            }
            matrix_lamp.ShowFrame(EFF_FIRESPARKS, current_color, &it);

      - addressable_lambda:
          name: Dandelions
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Dandelions");
            }
            matrix_lamp.ShowFrame(EFF_DANDELIONS, current_color, &it);

      - addressable_lambda:
          name: Serpentine
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Serpentine");
            }
            matrix_lamp.ShowFrame(EFF_SERPENTINE, current_color, &it);

      - addressable_lambda:
          name: Turbulence
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Turbulence");
            }
            matrix_lamp.ShowFrame(EFF_TURBULENCE, current_color, &it);

      - addressable_lambda:
          name: Arrows
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Arrows");
            }
            matrix_lamp.ShowFrame(EFF_ARROWS, current_color, &it);

      - addressable_lambda:
          name: Avrora
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Avrora");
            }
            matrix_lamp.ShowFrame(EFF_AVRORA, current_color, &it);

      - addressable_lambda:
          name: Lotus
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Lotus");
            }
            matrix_lamp.ShowFrame(EFF_LOTUS, current_color, &it);

      - addressable_lambda:
          name: Fontan
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Fontan");
            }
            matrix_lamp.ShowFrame(EFF_FONTAN, current_color, &it);

      - addressable_lambda:
          name: Night City
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Night City");
            }
            matrix_lamp.ShowFrame(EFF_NIGHTCITY, current_color, &it);

      - addressable_lambda:
          name: Rain
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Rain");
            }
            matrix_lamp.ShowFrame(EFF_RAIN, current_color, &it);

      - addressable_lambda:
          name: Mirage
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Mirage");
            }
            matrix_lamp.ShowFrame(EFF_MIRAGE, current_color, &it);

      - addressable_lambda:
          name: Hand Fan
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Hand Fan");
            }
            matrix_lamp.ShowFrame(EFF_HANDFAN, current_color, &it);

      - addressable_lambda:
          name: Light Filter
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Light Filter");
            }
            matrix_lamp.ShowFrame(EFF_LIGHTFILTER, current_color, &it);

      - addressable_lambda:
          name: A Taste of Honey
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "A Taste of Honey");
            }
            matrix_lamp.ShowFrame(EFF_TASTEHONEY, current_color, &it);

      - addressable_lambda:
          name: Spindle
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Spindle");
            }
            matrix_lamp.ShowFrame(EFF_SPINDLE, current_color, &it);

      - addressable_lambda:
          name: Popuri
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Popuri");
            }
            matrix_lamp.ShowFrame(EFF_POPURI, current_color, &it);

      - addressable_lambda:
          name: Rainbow Spot
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Rainbow Spot");
            }
            matrix_lamp.ShowFrame(EFF_RAINBOW_SPOT, current_color, &it);

      - addressable_lambda:
          name: Scanner
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Scanner");
            }
            matrix_lamp.ShowFrame(EFF_SCANNER, current_color, &it);

      - addressable_lambda:
          name: White Color
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "White Color");
            }
            matrix_lamp.ShowFrame(EFF_WHITE_COLOR, current_color, &it);

      - addressable_lambda:
          name: Colors
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Colors");
            }
            matrix_lamp.ShowFrame(EFF_COLORS, current_color, &it);

      - addressable_lambda:
          name: Ukraine
          update_interval: 0s
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Ukraine");
            }
            matrix_lamp.ShowFrame(EFF_UKRAINE, current_color, &it);

      - addressable_lambda:
          name: Bluez
          update_interval: 100ms
          lambda: |-
            Color colors[] = { Color(255, 255, 255),
                               Color(238, 0, 255),
                               Color(255, 157, 0),
                               Color(0, 28, 209),
                               Color(183, 255, 0),
                               Color(0, 128, 128),
                               Color(255, 0, 255),
                               Color(255, 215, 0),
                               Color(30, 144, 255),
                               Color(220, 20, 60),
                             };
            static Color led[${num_leds}];
            static int step = 0;

            const int width = 10;
            const int count = 10;

            if (initial_run)
            {
              ESP_LOGD("effect", "Bluez");

              step = 0;
            }

            int pos = 0;
            int j = 0;

            for (int i = 0; i < it.size(); i++)
            {
              if (j >= width)
              {
                j = 0;
                pos++;
                if (pos >= count)
                {
                  pos = 0;
                }
              }

              led[i] = colors[pos];
              j++;
            }

            for (int s = 0; s < step; s++)
            {
              Color last = led[it.size() - 1];
              for (int i = it.size() - 1; i > 0; i--)
              {
                led[i] = led[i - 1];
              }
              led[0] = last;
            }

            step++;
            if (step >= it.size())
            {
              step = 0;
            }

            for (int i = 0; i < it.size(); i++)
            {
              it[i] = led[i];
            }

      - addressable_lambda:
          name: Fireplace
          update_interval: 30ms
          lambda: |-
            const uint8_t gamma8[] = {
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
              2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,
              5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10,
              10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
              17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
              25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
              37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
              51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
              69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
              90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 109, 110, 112, 114,
              115, 117, 119, 120, 122, 124, 126, 127, 129, 131, 133, 135, 137, 138, 140, 142,
              144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 167, 169, 171, 173, 175,
              177, 180, 182, 184, 186, 189, 191, 193, 196, 198, 200, 203, 205, 208, 210, 213,
              215, 218, 220, 223, 225, 228, 231, 233, 236, 239, 241, 244, 247, 249, 252, 255
            };

            struct leds_s {
              int16_t current, delta, steps;
            };
            static struct leds_s *leds = (struct leds_s *)calloc(it.size(), sizeof(struct leds_s));

            if (initial_run)
            {
              ESP_LOGD("effect", "Fireplace");

              it.all() = Color::BLACK;
            }

            // TODO: Tune
            int _hue = 0;     // id(want_fireplace_hue);
            int _ambient = 1; // id(want_fireplace_ambient);
            int _steps = 10;  // id(want_fireplace_steps);

            for (auto i = 0; i < it.size(); ++i)
            {
              if (!leds[i].steps)
              {
                int v = random8() - leds[i].current / 100;
                if (v > 0)
                {
                  leds[i].steps = random(60 * _steps / 100, _steps);
                }
                else
                {
                  leds[i].steps = random(_steps, 140 * _steps / 100);
                }
                leds[i].delta = 100 * v / leds[i].steps;
              }
              else
              {
                leds[i].current += leds[i].delta;
                leds[i].steps--;
              }
              int h = leds[i].current / 100;
              it[i] = ESPHSVColor(_hue + scale8_video(h, 8), 255, gamma8[qadd8(h, _ambient)]);
            }

      - addressable_lambda:
          name: Kaleidoscope
          update_interval: 15ms
          lambda: |-
            if (initial_run)
            {
              ESP_LOGD("effect", "Kaleidoscope");

              it.all() = Color::BLACK;
            }

            static int counter = 0;
            for (uint8_t row = 0; row < WIDTH; row++)
            {
              for (uint8_t col = 0; col < HEIGHT; col++)
              {
                int delta = abs((int)(WIDTH - row * 2)) + abs((int)(HEIGHT - col * 2));
                it[row * HEIGHT + col] = ESPHSVColor(delta * 4 + counter, 255, 255);
              }
            }
            counter++;
